// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id                   String                  @id @default(uuid())
  clerkUserId          String                  @unique
  email                String                  @unique
  name                 String?                 
  imageUrl             String?                 @unique
  industry             String?                 @unique
  industryInsight      IndustryInsight?        @relation(fields: [industry], references: [industry])
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt


  bio                  String?
  experience           Int?
  skills               String[]


  assessments          Assessments[]
  resume               Resume?
  coverLetter          CoverLetter[]
}


model Assessments{
  id                   String                  @id @default(uuid())
  userId               String
  user                 User                    @relation(fields: [userId], references:[id])
  quizScore            Float                   // Overall Quiz Score
  questions            Json[]                  // Array of {question, answer, userAnswer, isCorrect}
  category             String                  //"Technical", "Behavioral", etc
  improvementTip       String?                 // AI Generated Improvement Tip
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt

  @@index([userId])
}


model Resume{
  id                   String                  @id @default(cuid())
  userId               String                  @unique    // One Resume Per User
  user                 User                    @relation(fields: [userId], references:[id])
  content              String                  @db.Text  // Markdown content
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
}

model CoverLetter{
  id                   String                  @id @default(cuid())
  userId               String      
  user                 User                    @relation(fields: [userId], references:[id])
  content              String                  // Markdown content 
  jobDescription       String?
  companyName          String                  // Name of company applying to
  jobTitle             String                  // Position applying for
  status               String
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt

  @@index([userId])
}

model IndustryInsight{
  id                   String                   @id @default(cuid())
  industry             String                   @unique        // The industry this data belongs to(eg: "tech-software-ddevelopment")
  users                User[]                   // Users in this industry

  // Salary Data
  salaryRanges         Json[]                   // Salary data; Array of { role : string, min : float, max : float, median : float, location : string?}
  
  // Industry Trends
  growthRate           Float                    // Industry Growth Rate
  demandLevel          DemandLevel              // "High", "Medium", "Low"
  topSkills            String[]                 // Most in-demand skills

  // Market Conditions
  marketOutlook        MarketOutlook            // "Positive", "Neutral", "Negative"
  keyTrends            String[]                 // Array of current industry trends
            
  // Learning Suggestions
  recommendedSkills    String[]                  //Skills recommended for industry


  nextUpdate           DateTime?                 // Optional
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt

  @@index([industry])
}

enum DemandLevel{
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE
}